class Label:
    def __init__(self, name, value):
        self._name = name
        self._value = value

    def __repr__(self):
        return f'{self._name.ljust(25)} ({self._value:05d} | {hex(self._value).rjust(8, " ")})'


NAME_TO_VALUE = dict(
    IMX477_TABLE_WAIT_MS=0x0,
    IMX477_TABLE_END=0x1,
    REG_MODEL_ID_MSB=0x0016,
    REG_MODEL_ID_LSB=0x0017,
    REG_MODE_SEL=0x0100,
    REG_SW_RESET=0x0103,
    REG_CSI_LANE=0x0114,
    REG_DPHY_CTRL=0x0808,
    REG_EXCK_FREQ_MSB=0x0136,
    REG_EXCK_FREQ_LSB=0x0137,
    REG_FRAME_LEN_MSB=0x0340,
    REG_FRAME_LEN_LSB=0x0341,
    REG_LINE_LEN_MSB=0x0342,
    REG_LINE_LEN_LSB=0x0343,
    REG_X_ADD_STA_MSB=0x0344,
    REG_X_ADD_STA_LSB=0x0345,
    REG_X_ADD_END_MSB=0x0348,
    REG_X_ADD_END_LSB=0x0349,
    REG_Y_ADD_STA_MSB=0x0346,
    REG_Y_ADD_STA_LSB=0x0347,
    REG_Y_ADD_END_MSB=0x034A,
    REG_Y_ADD_END_LSB=0x034B,
    REG_X_OUT_SIZE_MSB=0x034C,
    REG_X_OUT_SIZE_LSB=0x034D,
    REG_Y_OUT_SIZE_MSB=0x034E,
    REG_Y_OUT_SIZE_LSB=0x034F,
    REG_IMG_ORIENT=0x0101,
    REG_BINNING_MODE=0x0900,
    REG_BINNING_HV=0x0901,
    REG_BINNING_WEIGHTING=0x0902,
    REG_CSI_FORMAT_C=0x0112,
    REG_CSI_FORMAT_D=0x0113,
    REG_ANA_GLOBAL_GAIN_U=0x0204,
    REG_ANA_GLOBAL_GAIN_L=0x0205,
    REG_DIG_GLOBAL_GAIN=0x3FF9,
    REG_DIG_GAIN_GR_U=0x020E,
    REG_DIG_GAIN_GR_L=0x020F,
    REG_DIG_GAIN_R_U=0x0210,
    REG_DIG_GAIN_R_L=0x0211,
    REG_DIG_GAIN_B_U=0x0212,
    REG_DIG_GAIN_B_L=0x0213,
    REG_DIG_GAIN_GB_U=0x0214,
    REG_DIG_GAIN_GB_L=0x0215,
    REG_ANA_GAIN_GLOBAL1_MSB=0x00F0,
    REG_ANA_GAIN_GLOBAL1_LSB=0x00F1,
    REG_ANA_GAIN_GLOBAL2_MSB=0x00F2,
    REG_ANA_GAIN_GLOBAL2_LSB=0x00F3,
    REG_ANA_GAIN_GLOBAL3_MSB=0x00F4,
    REG_ANA_GAIN_GLOBAL3_LSB=0x00F5,
    REG_DIG_GAIN_GLOBAL1_MSB=0x00F6,
    REG_DIG_GAIN_GLOBAL1_LSB=0x00F7,
    REG_DIG_GAIN_GLOBAL2_MSB=0x00F8,
    REG_DIG_GAIN_GLOBAL2_LSB=0x00F9,
    REG_DIG_GAIN_GLOBAL3_MSB=0x00FA,
    REG_DIG_GAIN_GLOBAL3_LSB=0x00FB,
    REG_FINE_INTEGRATION_TIME_MSB=0x0200,
    REG_FINE_INTEGRATION_TIME_LSB=0x0201,
    REG_COARSE_INTEGRATION_TIME_MSB=0x0202,
    REG_COARSE_INTEGRATION_TIME_LSB=0x0203,
    REG_IVTPXCK_DIV=0x0301,  # The Pixel Clock Divider for IVTS   ,
    REG_IVTSYCK_DIV=0x0303,  # The System Clock Divider for IVTS  ,
    REG_IOP_PREPLLCK_DIV=0x030D,  # The pre-PLL Clock Divider for IOPS ,
    REG_IVT_PREPLLCK_DIV=0x0305,  # The pre-PLL Clock Divider for IVTS ,
    REG_PLL_IVT_MPY_MSB=0x0306,  # The PLL multiplier for IVTS [10:8] ,
    REG_PLL_IVT_MPY_LSB=0x0307,  # The PLL multiplier for IVTS [7:0]  ,
    REG_IOPPXCK_DIV=0x0309,  # The Pixel Clock Divider for IOPS   ,
    REG_IOPSYCK_DIV=0x030B,  # The System Clock Divider for IOPS  ,
    REG_IOP_MPY_MSB=0x030E,  # The pre-PLL Clock Divider for IOPS ,
    REG_IOP_MPY_LSB=0x030F,  # The PLL multiplier for IOPS [7:0]  ,
    REG_PLL_MULTI_DRV=0x0310,  # PLL mode select: Dual Mode         ,
    IMX477_REG_ORIENTATION=0x0101,
    REG_TEST_PATTERN_MSB=0x0600,
    REG_TEST_PATTERN_LSB=0x0601,
    REG_TP_RED_MSB=0x0602,
    REG_TP_RED_LSB=0x0603,
    REG_TP_GREENR_MSB=0x0604,
    REG_TP_GREENR_LSB=0x0605,
    REG_TP_BLUE_MSB=0x0606,
    REG_TP_BLUE_LSB=0x0607,
    REG_TP_GREENB_MSB=0x0608,
    REG_TP_GREENB_LSB=0x0609,
    REG_FRAME_BLANKSTOP_CTRL=0xE000,
    REG_PD_AREA_WIDTH_MSB=0x38A8,
    REG_PD_AREA_WIDTH_LSB=0x38A9,
    REG_PD_AREA_HEIGHT_MSB=0x38AA,
    REG_PD_AREA_HEIGHT_LSB=0x38AB,
    REG_FRAME_LENGTH_CTRL=0x0350,
    REG_EBD_SIZE_V=0xBCF1,
    REG_DPGA_GLOBEL_GAIN=0x3FF9,
    REG_X_ENV_INC_CONST=0x0381,
    REG_X_ODD_INC_CONST=0x0383,
    REG_Y_ENV_INC_CONST=0x0385,
    REG_Y_ODD_INC=0x0387,
    REG_MULTI_CAM_MODE=0x3F0B,
    REG_ADC_BIT_SETTING=0x3F0D,
    REG_SCALE_MODE=0x0401,
    REG_SCALE_M_MSB=0x0404,
    REG_SCALE_M_LSB=0x0405,
    REG_SCALE_N_MSbit=0x0406,
    REG_SCALE_N_LSB=0x0407,
    REG_DIG_CROP_X_OFFSET_MSB=0x0408,
    REG_DIG_CROP_X_OFFSET_LSB=0x0409,
    REG_DIG_CROP_Y_OFFSET_MSB=0x040A,
    REG_DIG_CROP_Y_OFFSET_LSB=0x040B,
    REG_DIG_CROP_WIDTH_MSB=0x040C,
    REG_DIG_CROP_WIDTH_LSB=0x040D,
    REG_DIG_CROP_HEIGHT_MSB=0x040E,
    REG_DIG_CROP_HEIGHT_LSB=0x040F,
    REG_REQ_LINK_BIT_RATE_MSB=0x0820,  # Output Data Rate, Mbps [31:24]     ,
    REG_REQ_LINK_BIT_RATE_LMSB=0x0821,  # Output Data Rate, Mbps [23:16]     ,
    REG_REQ_LINK_BIT_RATE_MLSB=0x0822,  # Output Data Rate, Mbps [15:8]      ,
    REG_REQ_LINK_BIT_RATE_LSB=0x0823,  # Output Data Rate, Mbps [7:0]       ,
    REG_TCLK_POST_EX_MSB=0x080A,  # MIPI Global Timing (Tclk) [9:8]    ,
    REG_TCLK_POST_EX_LSB=0x080B,  # MIPI Global Timing (Tclk) [7:0]    ,
    REG_THS_PRE_EX_MSB=0x080C,  # MIPI Global Timing (ths_prepare)   ,
    REG_THS_PRE_EX_LSB=0x080D,  # MIPI Global Timing (ths_prepare)   ,
    REG_THS_ZERO_MIN_MSB=0x080E,  # MIPI Global Timing (ths_zero_min)  ,
    REG_THS_ZERO_MIN_LSB=0x080F,  # MIPI Global Timing (ths_zero_min)  ,
    REG_THS_TRAIL_EX_MSB=0x0810,  # MIPI Global Timing (ths_trail)     ,
    REG_THS_TRAIL_EX_LSB=0x0811,  # MIPI Global Timing (ths_trail)     ,
    REG_TCLK_TRAIL_MIN_MSB=0x0812,  # MIPI Global Timing (Tclk_trail_min),
    REG_TCLK_TRAIL_MIN_LSB=0x0813,  # MIPI Global Timing (Tclk_trail_min),
    REG_TCLK_PREP_EX_MSB=0x0814,  # MIPI Global Timing (Tclk_prepare)  ,
    REG_TCLK_PREP_EX_LSB=0x0815,  # MIPI Global Timing (Tclk_prepare)  ,
    REG_TCLK_ZERO_EX_MSB=0x0816,  # MIPI Global Timing (Tclk_zero)     ,
    REG_TCLK_ZERO_EX_LSB=0x0817,  # MIPI Global Timing (Tclk_zero)     ,
    REG_TLPX_EX_MSB=0x0818,  # MIPI Global Timing (Tlpx)          ,
    REG_TLPX_EX_LSB=0x0819,  # MIPI Global Timing (Tlpx)          ,
    REG_PDAF_CTRL1_0=0x3E37,
    REG_POWER_SAVE_ENABLE=0x3F50,
    REG_LINE_LEN_INCLK_MSB=0x3F56,
    REG_LINE_LEN_INCLK_LSB=0x3F57,
    REG_MAP_COUPLET_CORR=0x0B05,
    REG_SING_DYNAMIC_CORR=0x0B06,
    REG_CIT_LSHIFT_LONG_EXP=0x3100,
    REG_TEMP_SENS_CTL=0x0138,
    REG_DOL_HDR_EN=0x00E3,
    REG_DOL_HDR_NUM=0x00E4,
    REG_DOL_CSI_DT_FMT_H_2ND=0x00FC,
    REG_DOL_CSI_DT_FMT_L_2ND=0x00FD,
    REG_DOL_CSI_DT_FMT_H_3ND=0x00FE,
    REG_DOL_CSI_DT_FMT_L_3ND=0x00FF,
    REG_DOL_CONST=0xE013,
)

VALUE_TO_NAME = {
    v: k
    for k, v in NAME_TO_VALUE.items()
}


def add_label(register: int):
    if register not in VALUE_TO_NAME:
        return Label(name='UNKNOWN', value=register)
    return Label(VALUE_TO_NAME[register], register)
